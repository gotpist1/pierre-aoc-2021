/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package com.cygni.stridsberg.aoc;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


public class App {
    private final List<String> input;

    public App(List<String> input) {
        this.input = input;
    }

    public static void main(String[] args) throws IOException {
        System.out.println("java");
        List<String> input = parseInput("input.txt");

        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2")) {
            System.out.println(new App(input).getSolutionPart2());
        } else {
            System.out.println(new App(input).getSolutionPart1());
        }
    }

    private static List<String> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
            .collect(Collectors.toList());
    }


    public Integer getSolutionPart1() {
        List<Integer> validLengths = List.of(3, 4, 7, 2);
        var t = input.stream().map(s -> s.substring(s.indexOf("|") + 1))
            .filter(s -> !s.isEmpty())
            .map(s -> s.split("\\s+"))
            .flatMap(Arrays::stream)
            .filter(s -> validLengths.contains(s.length()))
            .count();
        System.out.println(t);
        return 1;
    }

    public Integer getSolutionPart2() {
        Map<String,String> numberMap = Map.of("012345","0","12","1","01346","2","01236","3","1256","4","02356",
            "5","023456","6","012","7","0123456","8",
            "012356","9");
        List<String> outputEntrys = new ArrayList<>();
        Map<String, String> valuesMap = new HashMap<>();

        List<SignalPatternAndCode> patternsList = new ArrayList<>();
        for (String line : input) {
            var keyValue = line.split("\\|");
            valuesMap.put(keyValue[0], keyValue[1]);
            patternsList.add(new SignalPatternAndCode(Arrays.stream(keyValue[0].split("\\s+"))
                .filter(s -> !s.isEmpty())
                .collect(Collectors.toList()),
                Arrays.stream(keyValue[1].split("\\s+"))
                    .filter(s -> !s.isEmpty())
                    .collect(Collectors.toList())));
        }

        for (SignalPatternAndCode signalPatternAndCode : patternsList) {
            Map<String, Integer> valuesMap2 = new HashMap<>();
            Map<String, String> valuesMap3 = new HashMap<>();
            signalPatternAndCode.signalPatterns().forEach(signalPattern -> {
                switch (signalPattern.length()) {
                    case 2 -> valuesMap2.put(signalPattern, 1);
                    case 3 -> valuesMap2.put(signalPattern, 7);
                    case 4 -> valuesMap2.put(signalPattern, 4);
                    case 7 -> valuesMap2.put(signalPattern, 8);
                }
            });
            String one = valuesMap2.entrySet().stream().filter(e -> e.getValue() == 1).map(Map.Entry::getKey).findFirst().get();
            String eight = valuesMap2.entrySet().stream().filter(e -> e.getValue() == 8).map(Map.Entry::getKey).findFirst().get();
            String four = valuesMap2.entrySet().stream().filter(e -> e.getValue() == 4).map(Map.Entry::getKey).findFirst().get();
            String seven = valuesMap2.entrySet().stream().filter(e -> e.getValue() == 7).map(Map.Entry::getKey).findFirst().get();
            String zeroSegment="",oneSegment= "", twoSegment= "", sixSegment= "",
               nineSegment ="";
            oneSegment = findDiff(seven,one).get();
            valuesMap3.put(oneSegment,"0");

            var allWithSixSegments =
                signalPatternAndCode.signalPatterns().stream().filter(p -> p.length() == 6).collect(Collectors.toList());

            for (String pattern : allWithSixSegments) {
                var sevenDiff = findDiff(seven, pattern);
                var fourDiff = findDiff(four, pattern);
                if (sevenDiff.isPresent() && fourDiff.isPresent() && sevenDiff.get().equals(fourDiff.get())) {
                    valuesMap2.put(pattern, 6);
                    sixSegment = sevenDiff.get();
                    valuesMap3.put(sixSegment,"1");
                    var zeroAndOneSeg = oneSegment + sixSegment;
                    twoSegment = findDiff(seven,zeroAndOneSeg).get();
                    valuesMap3.put(twoSegment,"2");

                }
            }
            for (String pattern : allWithSixSegments) {
                var eightDiff = findDiff(eight, pattern);
                var fourDiff = findDiff(four, pattern);
                if (eightDiff.isPresent() && fourDiff.isPresent() && eightDiff.get().equals(fourDiff.get())) {
                    if (!valuesMap2.containsKey(pattern)) {
                        valuesMap2.put(pattern, 0);
                        zeroSegment = findDiff(eight, pattern).get();
                        valuesMap3.put(zeroSegment,"6");
                        var fiveSegmentIndex = four.codePoints()
                            .mapToObj(c -> String.valueOf((char) c))
                            .filter(c -> !valuesMap3.containsKey(c))
                            .findFirst().get();
                        valuesMap3.put(fiveSegmentIndex,"5");
                    }
                }
            }
            for (String pattern : allWithSixSegments) {
                if (!valuesMap2.containsKey(pattern)) {
                    valuesMap2.put(pattern, 9);
                    nineSegment = findDiff(eight, pattern).get();
                    valuesMap3.put(nineSegment,"4");
                }
            }
            var threeSegmentIndex = eight.codePoints()
                .mapToObj(c -> String.valueOf((char) c))
                .filter(c -> !valuesMap3.containsKey(c))
                .findFirst().get();
            valuesMap3.put(threeSegmentIndex,"3");
            StringBuilder builder = new StringBuilder();
            for(String code : signalPatternAndCode.codes()){
               var currentCode = code.codePoints()
                   .mapToObj(c -> String.valueOf((char) c))
                   .map(valuesMap3::get)
                   .sorted()
                  .collect(Collectors.joining());
               var number = numberMap.get(currentCode);
               builder.append(number);
               System.out.println("hej");
           }
            outputEntrys.add(builder.toString());

        }


        return outputEntrys.stream().mapToInt(Integer::parseInt).sum();
    }


    record SignalPatternAndCode(List<String> signalPatterns, List<String> codes) {
    }

    private Optional<String> findDiff(String a, String b) {
        var tmp = b.codePoints()
            .mapToObj(c -> String.valueOf((char) c))
            .collect(Collectors.toList());
        return a.codePoints()
            .mapToObj(c -> String.valueOf((char) c))
            .filter(s -> !tmp.contains(s))
            .findFirst();
    }

}
