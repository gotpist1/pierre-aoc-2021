/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package com.cygni.stridsberg.aoc;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;


public class App {
    private final List<Integer> input;

    public App(List<Integer> input) {
        this.input = input;
    }

    public Optional<Integer> getSolutionPart1() {
        AtomicInteger increments = new AtomicInteger();
        return input.stream()
            .map(this::mapToIncrements)
            .reduce((curr, next) -> calculateIncrements(increments, curr, next))
            .map(Increments::increments);
    }

    public Optional<Integer> getSolutionPart2() {
        AtomicInteger increments = new AtomicInteger();
        return SlidingWindowSpliterator.windowed(input, 3)
            .map(group -> group.reduce(Math::addExact))
            .map(Optional::get)
            .map(this::mapToIncrements)
            .reduce((curr, next) -> calculateIncrements(increments, curr, next))
            .map(Increments::increments);

    }

    private Increments calculateIncrements(AtomicInteger increments, Increments curr, Increments next) {
        if (next.value > curr.value) {
            increments.getAndIncrement();
            return new Increments(next.value, increments.get());
        }
        return next;
    }

    private Increments mapToIncrements(int value) {
        return new Increments(value, 0);
    }

    public record Increments(int value, int increments) {
    }

    ;


    public static void main(String[] args) throws IOException {
        System.out.println("java");
        List<Integer> input = parseInput("input.txt");

        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2")) {
            System.out.println(new App(input).getSolutionPart2());
        } else {
            System.out.println(new App(input).getSolutionPart1());
        }
    }

    private static List<Integer> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
            .map(Integer::parseInt)
            .collect(Collectors.toList());
    }
}
